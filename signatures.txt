#light





namespace ImageLibrary
    
    module Operations =
        
        val grayScaleHelper: int * int * int -> int * int * int
        
        val Grayscale:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list -> (int * int * int) list list
        
        val thresholdHelper:
          'a * 'a * 'a -> threshold: 'a -> depth: int -> int * int * int
            when 'a: comparison
        
        val Threshold:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list ->
            threshold: int -> (int * int * int) list list
        
        val FlipHorizontal:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list -> (int * int * int) list list
        
        val calculateAndPassNewLists:
          int * int * int ->
            int * int * int ->
              int * int * int -> threshold: int -> int * int * int
        
        val obtained2Lists:
          L1: (int * int * int) list ->
            L2: (int * int * int) list ->
            threshold: int -> (int * int * int) list
        
        val iterateThroughRowsOfLists:
          thresholdVal: int ->
            image: (int * int * int) list list -> (int * int * int) list list
        
        val EdgeDetect:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list ->
            threshold: int -> (int * int * int) list list
        
        val RotateRight90:
          width: int ->
            height: int ->
            depth: int ->
            image: (int * int * int) list list -> (int * int * int) list list

